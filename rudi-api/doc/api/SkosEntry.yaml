#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
# [- LIST OF CHANGES -]

# [1.0.1]
#   -

#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
openapi: 3.0.0
info:
  version: 1.0.0
  title: SKOS entry
  description: SKOS concept definition
  termsOfService: 'no'
  contact:
    name: Olivier Martineau
    email: 'community@rudi-univ-rennes1.fr'
  license:
    name: GPLv3
    url: 'https://www.gnu.org/licenses/gpl-3.0.html'

#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/OlivierMartineau/RUDI-PRODUCER/api/v1

#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
tags:
  - name: Create
  - name: Update
  - name: Access
  - name: Delete
  - name: Report

#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
paths:
  #=============================================================================
  '/skos/concept/{id}':
    summary: Access the concept (meta)data
    parameters:
      - name: 'id'
        description: Unique id of the concept
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConceptID'
    'get':
      tags:
        - Access
      description: Returns the (meta)data for the identified concept
      # - links for downloading the concept?
      # - can we access a metadata but not the concept?
      operationId: getConcept
      responses:
        '200':
          description: (Meta)data for the identified concept
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concept'
        # These errors are the standard error responses for every query
        '400':
          $ref: '#/components/responses/Error400BadRequest'
        '401':
          $ref: '#/components/responses/Error401Unauthorized'
        '403':
          $ref: '#/components/responses/Error403Forbidden'
        '404':
          $ref: '#/components/responses/Error404NotFound'
        '405':
          $ref: '#/components/responses/Error405MethodNotAllowed'
        '406':
          $ref: '#/components/responses/Error406NotAcceptable'
        '408':
          $ref: '#/components/responses/Error408RequestTimeout'
        '410':
          $ref: '#/components/responses/Error410Gone'
        '423':
          $ref: '#/components/responses/Error423Locked'
        '429':
          $ref: '#/components/responses/Error429TooManyRequests'
        '500':
          $ref: '#/components/responses/Error500InternalServerError'
        '503':
          $ref: '#/components/responses/Error503ServiceUnavailable'

    #=============================================================================
    # '/skos/concept/{id}':
    'delete':
      tags:
        - Delete
      description: Deletes one identified concept
      # - should we keep the metadata for some time?
      # - see above: can we access a metadata but not the concept?
      operationId: deleteConcept
      responses:
        '200':
          description: Concept successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concept'

  #=============================================================================
  '/skos/concept':
    'get':
      summary: Access the metadata for every concept
      description: Returns an array of the metadata of every concept
      tags:
        - Access
      operationId: getConceptList
      parameters:
        - name: 'limit'
          description: Max number of concepts to return
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 500 #default MAX to limit the server overload
          example: 100
        - name: 'offset'
          description: Index of the first line of concepts to display
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1

      responses:
        '200':
          description: Metadata for every concept
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptList'
        '206':
          description: Metadata for a subset of the concepts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptList'

    #=============================================================================
    # '/skos/concept':
    'post':
      tags:
        - Create
      description: Create one new concept
      operationId: addConcept
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Concept'

      responses:
        '202':
          description: The creation of the concept has been initiated.

    #=============================================================================
    # '/skos/concept':
    'put':
      tags:
        - Update
      description: Update (meta)data on the Proxi/Producer node for one identified
        concept
      operationId:
        updateConcept
        # NOTES:
        # - the request implies id is present in the body, so
        #   '/concepts/{id}' is redundant
        # - the concept id should exist already, or the upload will fail
        # - data in the proxi/producer node + metadata both on producer node
        #   AND on RUDI catalog node
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Concept'
      responses:
        '202':
          description: The update of the concept has been initiated

  #=============================================================================
  '/concepts/deletion':
    'post':
      tags:
        - Delete
      description:
        Delete data on the Proxi/Producer node for several identified concepts
        #TODO: and metadata? After e.g. a year?
      operationId: deleteConcepts
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConceptID'
      responses:
        '202':
          description: The deletion of the concepts has been initiated.

  #=============================================================================
  '/concepts/{id}/report':
    parameters:
      - name: 'id'
        description: Unique id of the concept
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConceptID'
    'post':
      tags:
        - Report
      description: >
        Action called when receiving an ackowledgement for an integration
        operation from the Portal
      operationId: addIntegrationReport
      #TODO maybe such operation should stay private
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationReport'
      responses:
        '202':
          description: A new report was created.
    'put':
      tags:
        - Report
      description: Report from the Portal on the result of a previous operation request
      operationId: updateIntegrationReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationReport'
      responses:
        '202':
          description: The report has been received.
        #•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
components:
  #=============================================================================
  securitySchemes:
    authentInRudi:
      type: oauth2
      description: >
        This API uses OAuth 2 with the implicit grant flow.
        #[More info](https://api.example.com/docs/auth)

      flows:
        implicit:
          # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            access: Read concepts
            write: Write concept

  #=============================================================================
  responses:
    #---------------------------------------------------------------------------
    'Error400BadRequest':
      description: The JSON is not valid.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError400_BadRequest.yaml'
    #---------------------------------------------------------------------------
    'Error401Unauthorized':
      description: The request requires a user authentication.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError401_Unauthorized.yaml'
    #---------------------------------------------------------------------------
    'Error403Forbidden':
      description: The access is not allowed.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError403_Forbidden.yaml'
    #---------------------------------------------------------------------------
    'Error404NotFound':
      description: The concept was not found.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError404_NotFound.yaml'
    #---------------------------------------------------------------------------
    'Error405MethodNotAllowed':
      description: Request method is not supported for the requested concept.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError405_MethodNotAllowed.yaml'
    #---------------------------------------------------------------------------
    'Error406NotAcceptable':
      description: Headers sent in the request are not compatible with the service.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError406_NotAcceptable.yaml'
    #---------------------------------------------------------------------------
    'Error408RequestTimeout':
      description: >
        The client did not produce a request within the time that the server was
        prepared to wait. The client may repeat the request without
        modifications at any later time.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError408_RequestTimeout.yaml'
    #---------------------------------------------------------------------------
    'Error410Gone':
      description: >
        The requested concept is no longer available and will not be available
        again. The concept should be purged from the client system.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError410_Gone.yaml'
    #---------------------------------------------------------------------------
    'Error423Locked':
      description: The concept that is being accessed is locked.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError423_Locked.yaml'
    #---------------------------------------------------------------------------
    'Error429TooManyRequests':
      description: The user has sent too many requests in a short period.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError429_TooManyRequests.yaml'
    #---------------------------------------------------------------------------
    'Error500InternalServerError':
      description: An unexpected error occured.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError500_InternalServerError.yaml'
    #---------------------------------------------------------------------------
    'Error503ServiceUnavailable':
      description: The server is currently unable to handle the request.
      content:
        application/json:
          schema:
            $ref: 'https://raw.githubusercontent.com/zit0un/HttpErrorsOAS3/main/schemas/HttpError503_ServiceUnavailable.yaml'

  #=============================================================================
  schemas:
    #---------------------------------------------------------------------------
    'IntegrationError':
      required:
        - error_code
        - error_message
      properties:
        'error_code':
          type: integer
        'error_message':
          type: string
        'field_name':
          type: string

    #---------------------------------------------------------------------------
    'IntegrationReport':
      required:
        - report_id
        - concept_id
      properties:
        'report_id':
          allOf:
            - $ref: '#/components/schemas/UUIDv4'
            - type: string
              description: Unique identifier of the integration report
        'concept_id':
          $ref: '#/components/schemas/ConceptID'
        'concept_title':
          type: string
          description: Simple name of the concept
        'submission_date':
          allOf:
            - $ref: '#/components/schemas/Date'
            - type: string
              description: >
                Date when the integration request was submitted by the
                Producer
        'treatment_date':
          allOf:
            - $ref: '#/components/schemas/Date'
            - type: string
              description: Date when the integration request was processed by the Portal
        'method':
          description: Method used for the integration request by the Producer
          type: string
          enum: [POST, PUT, DELETE]
        'version':
          description: Version number of the integration contract used for the file
          type: integer
          minimum: 0
        'integration_status':
          description: State of the integration of the concept in the Portal
          type: string
          enum: [OK, KO]
        'comment':
          description: >
            Comment on the state of the integration of the concept in the
            Portal
          type: string
        'errors':
          description: >
            List of all the errors that were encounntered during the
            integration of the concept.
          type: array
          items:
            $ref: '#/components/schemas/IntegrationError'

    #---------------------------------------------------------------------------
    'ConceptID':
      description: Universally unique identifier for the concept
      type: string
      oneOf:
        - $ref: '#/components/schemas/UUIDv4'

    #---------------------------------------------------------------------------
    'UUIDv4':
      description: Universally unique identifier v4 format
      type: string
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'

    #---------------------------------------------------------------------------
    'DOI':
      description: Digital object identifier (modern Crossref DOIs version)
      type: string
      pattern: '^10.\d{4,9}/[-.;()/:\w]+$'
      # \d : digit character == [0-9]
      # \w : word character == [0-9a-zA-Z_]
      # /i (at the end) : expression is case insensitive
      #source: https://www.crossref.org/blog/dois-and-matching-regular-expressions/
      #alternative: https://github.com/regexhq/doi-regex/blob/master/index.js

    #---------------------------------------------------------------------------
    'MetadataList':
      type: array
      items:
        $ref: '#/components/schemas/Metadata'

    #---------------------------------------------------------------------------
    'Metadata':
      type: object
      required:
        - id
        - concept_title
        - summary
        - theme
        - producer
        - contact
        - format
        - dataset_size
        - reference_date
        - storage_status
        - connector
        - available_format
        - transmission_mode

      properties:
        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # IDENTIFICATION
        #——————————————————————————
        'id':
          $ref: '#/components/schemas/ConceptID'

        #——————————————————————————
        'local_id':
          description: Identifier in the data producer system
          type: string
          #TODO: Do we restrain this to a certain pattern, avoiding spaces and
          #      unusal characters?
          example: '2020.11-Laennec-AQMO-air quality sensors measures'

        #——————————————————————————
        'doi':
          $ref: '#/components/schemas/DOI'

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # DESCRIPTION
        #——————————————————————————
        'concept_title':
          description: Simple name for the concept
          type: string
          example: "Données de capteurs de la qualité de l'air, novembre 2020, Laënnec"
        # !DICO!

        #——————————————————————————
        'summary':
          description: More precise description for the whole dataset
          type: array
          items:
            $ref: '#/components/schemas/DictionaryEntry'
          minimum: 1
        # !DICO!

        #——————————————————————————
        'purpose':
          description: Context, objectives and final use of the data
          type: array
          items:
            $ref: '#/components/schemas/DictionaryEntry'

        #——————————————————————————
        'concept_language':
          description: Language used in the dataset, if relevant
          oneOf:
            - $ref: '#/components/schemas/Language'
        # !SKOS!

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # CLASSIFICATION
        #——————————————————————————
        'theme':
          $ref: '#/components/schemas/Theme'
        # !SKOS!

        #——————————————————————————
        'sub_theme':
          $ref: '#/components/schemas/SubTheme'
        # !SKOS!

        #——————————————————————————
        'keyword':
          description: List of tags that can be used to retrieve the data
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
        # !SKOS!

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # SPACE & TIME
        #——————————————————————————
        'lifespan':
          description: Period of time described by the data
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Date'
              - $ref: '#/components/schemas/PosixTimeSeconds'
              - $ref: '#/components/schemas/PosixTimeMilli'
              - $ref: '#/components/schemas/PosixTimeMicro'
              - $ref: '#/components/schemas/PosixTimeNano'
          minItems: 2
          maxItems: 2

        #——————————————————————————
        'bounding_box':
          allOf:
            - type: object
              description: >
                Geographic distribution of the data.
                Particularly relevant in the case of located sensors.
            - $ref: 'https://raw.githubusercontent.com/zit0un/GeoJSON-OAS3/main/schemas/GeoJsonObject.yaml'

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # REFERENCE FRAME
        #——————————————————————————
        'scale':
          description: >
            Spatial resolution, i.e. geographic or geometric precision
            used to describe the concept
          oneOf:
            - $ref: '#/components/schemas/MapScale'
            - $ref: '#/components/schemas/Resolution'

        #——————————————————————————
        'projection':
          description: Cartographic projection used to describe the data
          type: string
          example:
            'RGF93/Lambert-93 (EPSG:2154)'
            # 'RGF93/CC48 (EPSG:3948)'
          #TODO: 'Projection' thesaurus

        #——————————————————————————
        'spatial_representation':
          description: Data topology
          type: string
          example: 'Points' # 'Lines', 'Polygons'
        # !DICO!
        # Thesaurus ?

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # ACCESS CONSTRAINTS
        #——————————————————————————

        #——————————————————————————
        'consent':
          description: >
            Information that describes the level of confidentiality required to
            access or use the data. This is a reference to the consent folder, that can
          type: string
          #TODO: to be defined

        #——————————————————————————
        'access_condition':
          description: >
            Access restrictions for the use of data in the form of licence,
            confidentiality, terms of service, habilitation or required rights,
            economical model. Default is open licence.
            #TODO: to be defined. Possible redundencies with other fields!
          type: object
          properties:
            'bibliographical_reference':
              description: Information that MUST be cited every time the data is used
              #TODO: to be defined
              #TODO: possible redundency with 'access_condition/mandatory_mention'
            # !DICO!
            'licence':
              type: object
              properties:
                'licence_label':
                  $ref: '#/components/schemas/SkosEntry'
                'licence_custom':
                  type: string
                'licence_uri':
                  type: string
                  format: URI
            'usage_constraint':
              type: array
              items:
                $ref: '#/components/schemas/DictionaryEntry'
              example:
                {
                  'fr_FR': 'Usage libre sous réserve des mentions obligatoires sur tout document de diffusion',
                }
            'mandatory_mention':
              description: >
                Mention that must be cited verbatim in every publication that
                makes use of the data
              type: array
              items:
                $ref: '#/components/schemas/DictionaryEntry'
              example: { 'fr_FR': 'Source: Région Bretagne' }
            'access_constraint':
              type: array
              items:
                $ref: '#/components/schemas/DictionaryEntry'
            'other_constraints':
              type: array
              items:
                $ref: '#/components/schemas/DictionaryEntry'
          example:
            {
              mandatory_mention: 'Source : Région Bretagne',
              licence_label: 'Licence ouverte v2.0',
              licence_url: 'https://www.etalab.gouv.fr/wp-content/uploads/2017/04/ETALAB-Licence-Ouverte-v2.0.pdf',
              usage_constraint: 'Licence',
              access_constraint: 'Autres restrictions',
              other_constraints: "Pas de restriction d'accès public",
            }

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # ORIGIN
        #——————————————————————————
        'producer':
          description: Entity that produced the data
          type: object
          required:
            - organization_name
          properties:
            'organization_name':
              description: Updated offical name of the organization
              type: string
            'address':
              description: Updated offical postal address of the organization
              type: string

          #TODO: properties to be defined

        #——————————————————————————
        'contact':
          type: object
          properties:
            'organization_name':
              description: Updated offical name of the organization
              type: string
            'contact_name':
              description: Updated name of the service, or possibly the person
              type: string
            'role':
              description: Updated status of the contact person
              type: string
              example: Administrator
            'email':
              description: >
                E-mail address, possibly not nominative to be less dependent
                on changes in the organization, and comply more easily with RGPD rules
              type: string
              format: email
              #TODO: RGPD compliant!

        #——————————————————————————
        'sensor':
          allOf:
            - description: Sensor used to produce the data
              type: object
            - $ref: 'https://github.com/mariotoffia/OpenAPI-SenML/blob/master/spec/protocol/senml/senml-entry.yaml'
          #'RFC 8428 / SenML - https://tools.ietf.org/html/rfc8428'
          #TODO: see OpenAPI implementation 'https://github.com/mariotoffia/OpenAPI-SenML'
          # https://www.iana.org/assignments/senml/senml.xml#senml-units

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # STORAGE
        #——————————————————————————
        'structure':
          description: >
            Link towards the concept that describes the structure of the data
            (language, norm, data structure, JSON schema, OpenAPI, etc.)
          type: string
          format: URI
          #'URI - https://tools.ietf.org/html/rfc2396'

        #——————————————————————————
        'format':
          $ref: '#/components/schemas/FileFormat'

        #——————————————————————————
        'encoding':
          description: Source encoding of the data
          type: string
          #format:
          #ISO/CEI 10646'
          #TODO: thesaurus for encoding

        #——————————————————————————
        'available_format':
          description: Available formats
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'

        #——————————————————————————
        'dataset_size':
          description: Indicative size of the data
          #TODO: how do we take into account the different variations?
          type: object
          required:
            - size
            - unit
          properties:
            'size':
              type: number
              minimum: 0
              #TODO: on the specifications, we said 'integer', but isn't decimal number more appropriate?
            'unit':
              $ref: '#/components/schemas/FileSizeUnit'
            'numbers_of_records':
              type: integer
              minimum: 0
            'number_of_fields':
              type: integer
              minimum: 0

        #——————————————————————————
        'reference_date':
          type: object
          required:
            - data
            - metadata
          properties:
            'data':
              $ref: '#/components/schemas/ReferenceDates'
            'metadata':
              $ref: '#/components/schemas/ReferenceDates'

        #——————————————————————————
        'dependencies':
          description: >
            dependencies are other concepts that were used as sources for the
            present concept (such ones are listed as parents) or that use
            the present concept as source (these are listed as children)
          type: object
          properties:
            'parents':
              description: Concepts that were used as sources by the present concept
              type: array
              items:
                $ref: '#/components/schemas/ConceptID'
            'children':
              description: Concepts that use the present concept as a source
              type: array
              items:
                $ref: '#/components/schemas/ConceptID'
          #TODO: unite with data_genealogy that would explain
          #      how the sources were used

        #——————————————————————————
        'data_genealogy':
          description: >
            Most complete information to estimate the quality of the sources and
            the interoperability of the data.
            This is not the place to describe all the treatments used to create
            or update the concept.
          type: string
          #TODO: introduce examples

        #——————————————————————————
        'anonymization':
          description: Method to anonymize data
          type: string
          format: URI
          # !SKOS! ?

        #——————————————————————————
        'update_status':
          description: >-
            Relevance status of the data
            - 'modified'    = the data is in the process of being created but
                              still incomplete
            - 'updated'     = the data is up to date
            - 'historical'  = ancient data that has been updated
            - 'obsolete'    = dataset that is too old but cannot be updated or
                            replaced with another
          type: string
          enum: [modified, updated, historical, obsolete]
        # !SKOS!

        #——————————————————————————
        'storage_status':
          description: >-
            Status of the storage of the dataset
            Metadata can exist without the data
            - online      = data are published and available
            - archived    = data are not immediately available, access is not automatic
            - unavailable = data were deleted
          type: string
          enum: [online, archived, unavailable]
        # !SKOS!

        #——————————————————————————
        'conformance':
          description: Data specifications that apply to the concept
          type: string
          format: URI
        # !SKOS! ?

        #—•—•—•—•—•—•—•—•—•—•—•—•—•
        # TRANSMISSION
        #——————————————————————————
        'connector':
          description: >
            Direct access to the whole dataset.
            In the case of open data without access restriction, this can be e.g. a URI.
          type: object
          #TODO: to be defined more precisely!
          # besoin : afficher les données dans un tableau

        #——————————————————————————
        # Makes it possible to check data integrity
        'checksum':
          type: object
          required:
            - algo
            - hash
          properties:
            'algo':
              $ref: '#/components/schemas/HashAlgorithm'
            'hash':
              type: string

        #——————————————————————————
        'transmission_mode':
          description: Describes if the concept is accessible as a file or a stream
          type: string
          enum: [file, stream]

        #——————————————————————————
        'latency':
          description: >
            Theorical delay between the production of the record and its availability,
            in milliseconds. Applies to temporal series of data.
          type: integer
          minimum: 0

        #——————————————————————————
        'period':
          description: >
            Theorical delay between the production of two records, in milliseconds.
            Applies to temporal series of data.
          type: integer
          minimum: 0

    #---------------------------------------------------------------------------
    'FileFormat':
      description: Source format of the data
      type: string
      enum: [json, xml, csv, xlsx, txt]
      #TODO: define the thesaurus for the file formats
      #TODO: is this relevant for streams?

    #---------------------------------------------------------------------------
    'FileSizeUnit':
      type: string
      enum: [Ko, Mo, To]
    # !SKOS!

    #---------------------------------------------------------------------------
    'HashAlgorithm':
      description: Method for computing the integrity hash of the data
      type: string
      enum: ['MD5', 'SHA-256', 'SHA-512']
      #TODO: define the thesaurus for the hash algorithms

    #---------------------------------------------------------------------------
    'Theme':
      description: Category for thematic classification of the data
      type: string
      # TODO: "Theme" thesaurus
      # !SKOS!

    #---------------------------------------------------------------------------
    'SubTheme':
      description: Sub-category for thematic classification of the data
      type: string
      # TODO: "Sub-theme" thesaurus
      # !SKOS!

    #---------------------------------------------------------------------------
    'Keyword':
      description: Tags to help researching the data
      type: array
      items:
        type: string
      # TODO: "Tags" thesaurus
      # !SKOS!

    #---------------------------------------------------------------------------
    'Date':
      description: 'Date in the ISO 8601 format'
      type: string
      format: date-time
      #TODO: timezone + nanosec?

    #---------------------------------------------------------------------------
    'ReferenceDates':
      description: 'Dates of the actions on the file'
      type: object
      required:
        - created
        - published
      properties:
        'created':
          $ref: '#/components/schemas/Date'
        'published':
          $ref: '#/components/schemas/Date'
        'updated':
          $ref: '#/components/schemas/Date'
        'deleted':
          $ref: '#/components/schemas/Date'

    #---------------------------------------------------------------------------
    'PosixTimeSeconds':
      description: EPOCH time in seconds
      type: integer
      pattern: '^[0-9]{10}$'

    #---------------------------------------------------------------------------
    'PosixTimeMilli':
      description: EPOCH time in milliseconds
      type: integer
      pattern: '^[0-9]{13}$'

    #---------------------------------------------------------------------------
    'PosixTimeMicro':
      description: EPOCH time in milcroseconds
      type: integer
      pattern: '^[0-9]{16}$'

    #---------------------------------------------------------------------------
    'PosixTimeNano':
      description: EPOCH time in nanoseconds
      type: integer
      pattern: '^[0-9]{19}$'

    #---------------------------------------------------------------------------
    'MapScale':
      description: >
        Denominator of the scale ratio (in the sense of a map common geographic scale)
      type: integer

    #---------------------------------------------------------------------------
    'Resolution':
      description: Smallest distance associated to the data
      type: object
      properties:
        'distance':
          type: integer
        'unit':
          type: string
          enum: [mm, m, km]
          #TODO: 'Resolution' thesaurus

    #---------------------------------------------------------------------------
    'SkosEntry':
      type: object
      required:
        - skos_value
        - skos_uri
      properties:
        'skos_value':
          description: Term used in RUDI system (eg in metadata files), most likely english one
          type: string
        'skos_uri':
          description: URI of the thesaurus that hosts the traduction of this term
          type: string
          format: URI
        'skos_context':
          description: Meaning, explaination of the context of use of this entry
          type: string
      example:
        {
          value: 'transport',
          skos_uri: 'https://publications.europa.eu/concept/authority/eurovoc/100237',
        }

    #---------------------------------------------------------------------------
    'DictionaryEntry':
      type: object
      required:
        - lang
        - text
      discriminator:
        propertyName: lang
      properties:
        'lang':
          $ref: '#/components/schemas/Language'
        'text':
          #TODO: possibly set limitations (size, characters allowed, HTML-ready or not)
          type: string
      example:
        {
          lang: 'fr_FR',
          text: "Données de capteurs de la qualité de l'air, nov. 2020, Laënnec, Rennes, France",
        }

    #---------------------------------------------------------------------------
    'Language':
      description: >
        Lowercase ISO-639 language code followed by the
        uppercase 2 letter ISO 3166-1 alpha-2 country code,
        both joined by an underscore
      type: string
      pattern: '^[a-z]{2}_[A-Z]{2}$'
      enum:
        [
          cs_CZ,
          da_DK,
          de_CH,
          de_DE,
          en_GB,
          en_US,
          el_GR,
          es_ES,
          fr_FR,
          hu_HU,
          it_IT,
          no_NO,
          pl_PL,
          pt_PT,
          ro_RO,
          ru_RU,
          sk_SK,
        ]
      # TODO: thesaurus of language (ISO-639) and country codes (ISO-3166) couples
      #url: 'https://app.swaggerhub.com/apis/nologo/thesaurus/1.0.0#/default/get_thesaurus_v1'

      # !SKOS!
#TODO : thesaurus : tableau de valeurs simples ou couples {label: "Texte à
#       afficher pour l'utilisateur", "valeur": "ValeurAssociee"}

#•••••••••••••••••••••••••••••••••••[ EOF ]••••••••••••••••••••••••••••••••••••#
