{
  "info": {
    "_postman_id": "92762c9f-1665-4697-8501-cf16d65e3b8c",
    "name": "prod-manager-soft-checks",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "13557783"
  },
  "item": [
    {
      "name": "Admin",
      "item": [
        {
          "name": "01. Check API open",
          "item": [
            {
              "name": "Test availability",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Testing availability\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseStr = codec.streamToString(pm.response)",
                      "    pm.expect(responseStr).to.eq('test')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const cacheKeys = ['stamp']",
                      "const cache = {}",
                      "cacheKeys.map(key => { cache[key] = pm.collectionVariables.get(key) })",
                      "pm.collectionVariables.clear()",
                      "for (const key in cache) pm.collectionVariables.set(key, cache[key])",
                      "pm.collectionVariables.set('dateUpdate', time.now())"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableCookies": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/open/test",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "open", "test"]
                }
              },
              "response": []
            },
            {
              "name": "Get git hash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get app hash\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseStr = codec.streamToString(pm.response)",
                      "    pm.expect(!!match.gitHash(responseStr)).to.be.true",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableCookies": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/open/hash",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "open", "hash"]
                }
              },
              "response": []
            },
            {
              "name": "Get app tag",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get app hash\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseStr = codec.streamToString(pm.response)",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableCookies": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/open/tag",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "open", "tag"]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "02. Identification",
          "item": [
            {
              "name": "Get PM cookies",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Store token\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json()",
                      "    pm.expect(res.username).to.eq(pm.variables.get('pmAdminUsr'))",
                      "    pm.expect(res.roles[0]).to.eq('SuperAdmin')",
                      "    //pm.expect(res.success).to.eq(\"logged as 'PM Admin'\")",
                      "    //const expirationTime = new Date(res.expires).getTime()",
                      "    //pm.expect(expirationTime).to.gt(new Date().getTime())",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\":\"{{pmAdminUsr}}\",\n    \"password\":\"{{pmAdminPwd}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{pmBackUrl}}/api/front/login",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "front", "login"]
                }
              },
              "response": []
            },
            {
              "name": "Get user info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Store token\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json()",
                      "    pm.expect(res.username).to.eq(pm.variables.get('pmAdminUsr'))",
                      "    pm.expect(res.roles[0]).to.eq('SuperAdmin')",
                      "    //pm.expect(res.success).to.eq(\"logged as 'PM Admin'\")",
                      "    //const expirationTime = new Date(res.expires).getTime()",
                      "    //pm.expect(expirationTime).to.gt(new Date().getTime())",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{pmBackUrl}}/api/front/user-info",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "front", "user-info"]
                }
              },
              "response": []
            },
            {
              "name": "Get UUID with cookies",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get UUID with cookies\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseStr = codec.streamToString(pm.response)",
                      "    pm.expect(!!match.uuid(responseStr)).to.be.true",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/data/uuid",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "data", "uuid"]
                }
              },
              "response": []
            },
            {
              "name": "Get Media token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Testing\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json();",
                      "    pm.expect(!!match.jwt(res.token)).to.be.true",
                      "    pm.collectionVariables.set('mediaToken', res.token)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/media/jwt",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "media", "jwt"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "03. Check API data",
          "item": [
            {
              "name": "Get version",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Check version\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const version = pm.response.stream.toString('utf8');",
                      "    pm.expect(!!match.version(version)).to.be.true",
                      "    pm.collectionVariables.set('apiVersion', version)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/data/version",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "data", "version"]
                }
              },
              "response": []
            },
            {
              "name": "Get API external URL (directly)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Check version\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const apiUrl = pm.response.stream.toString('utf8');",
                      "    pm.expect(apiUrl.startsWith('http')).to.be.true",
                      "    pm.collectionVariables.set('apiUrl', apiUrl)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{{{apiTokenName}}}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{apiUrl}}/api/admin/check/node/url",
                  "host": ["{{apiUrl}}"],
                  "path": ["api", "admin", "check", "node", "url"]
                }
              },
              "response": []
            },
            {
              "name": "Get API external URL (from PM)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Check version\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const apiUrl = pm.response.stream.toString('utf8');",
                      "    pm.expect(apiUrl.startsWith('http')).to.be.true",
                      "    pm.expect(apiUrl).to.eq(pm.collectionVariables.get('apiUrl'))",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/front/ext-api-url",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "front", "ext-api-url"]
                }
              },
              "response": []
            },
            {
              "name": "Get enums",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Get enums', () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json();",
                      "    pm.expect(res.fileextensions.mp3).to.eq('audio/mpeg')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/data/enum?lang=fr",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "data", "enum"],
                  "query": [
                    {
                      "key": "lang",
                      "value": "fr"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get themes FR",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Get themes FR', () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json();",
                      "    pm.expect(res.environment).to.eq('Environnement')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/data/enum/themes/fr",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "data", "enum", "themes", "fr"]
                }
              },
              "response": []
            },
            {
              "name": "Get themes EN",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Get themes EN', () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json();",
                      "    pm.expect(res.environment).to.eq('Environment')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/data/enum/themes/en",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "data", "enum", "themes", "en"]
                }
              },
              "response": []
            },
            {
              "name": "Get licences",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get licences\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json()",
                      "    pm.expect(res[0]?.concept_id).to.be.not.undefined",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/data/licences",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "data", "licences"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "04. Get rudi objects",
          "item": [
            {
              "name": "API Clean",
              "item": [
                {
                  "name": "Clean using API: meta",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: metadata\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/resources?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "resources"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: org",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: organizations\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/organizations?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "organizations"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: cont",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: contacts\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/contacts?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "contacts"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: media",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: media\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/media?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "media"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: keys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: keys\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/pub_keys?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "pub_keys"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Metadata",
              "item": [
                {
                  "name": "Get resources",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get resources\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    const meta1 = responseJson[0]",
                          "    const metaId1 = meta1?.global_id",
                          "    pm.expect(!!match.uuid(metaId1)).to.be.true",
                          "",
                          "    const readOrgId = meta1?.producer?.organization_id",
                          "    pm.expect(!!match.uuid(readOrgId)).to.be.true",
                          "",
                          "    const readContId1 = meta1?.contacts[0].contact_id",
                          "    pm.expect(!!match.uuid(readContId1)).to.be.true",
                          "",
                          "    pm.collectionVariables.set('readMetaId', metaId1)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/resources",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "resources"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get 1 resource",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get 1 resource\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const meta1 = pm.response.json()",
                          "    pm.expect(meta1.global_id).to.eql(pm.variables.get('readMetaId'))",
                          "    pm.expect(!!match.uuid(meta1.producer.organization_id))",
                          "    pm.collectionVariables.set('org1Id', meta1.producer.organization_id)",
                          "    pm.collectionVariables.set('org1Name', meta1.producer.organization_name)",
                          "    pm.collectionVariables.set('org1Addr', meta1.producer.organization_address)",
                          "",
                          "    pm.expect(!!match.uuid(meta1.contacts[0].contact_id))",
                          "    pm.collectionVariables.set('cont1Id', meta1.contacts[0].contact_id)",
                          "    pm.collectionVariables.set('cont1Name', meta1.contacts[0].contact_name)",
                          "    pm.collectionVariables.set('cont1Mail', meta1.contacts[0].email)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/resources/{{readMetaId}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "resources", "{{readMetaId}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Add resource",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Add resource\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    const metaId1 = responseJson.global_id",
                          "    pm.collectionVariables.set('metaTest', metaId1)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "",
                          "if (!pm.collectionVariables.get('metaId1')) pm.collectionVariables.set('metaId1', rand.uuid())",
                          "pm.collectionVariables.set('now', time.now())"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"collection_tag\": \"{{stamp}}\",\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_dates\": {\n            \"created\": \"{{now}}\",\n            \"updated\": \"{{now}}\"\n        }\n    },\n    \"global_id\": \"{{metaId1}}\",\n    \"local_id\": \"id-{{stamp}}\",\n    \"resource_title\": \"test CA 2009 - Ville de Rennes - Budget Principal\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Les données du Compte administratif de la Ville de Rennes sont des données de consommation effective qui sont en général publiées en juin de l'année suivante.\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Les données du Compte administratif de la Ville de Rennes sont des données de consommation effective qui sont en général publiées en juin de l'année suivante.\"\n        }\n    ],\n    \"theme\": \"economy\",\n    \"keywords\": [\n        \"budget\",\n        \"CA\",\n        \"Compte administratif\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{org1Id}}\",\n        \"organization_name\": \"{{org1Name}}\",\n        \"organization_address\": \"{{org1Addr}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{cont1Id}}\",\n            \"contact_name\": \"{{cont1Name}}\",\n            \"email\": \"{{cont1Mail}}\"\n        }\n    ],\n    \"available_formats\": [\n        {\n            \"connector\": {\n                \"url\": \"https://data-rudi.aqmo.org/media/download/6ccbd350-c780-41e8-be51-cef47401fb4a\",\n                \"interface_contract\": \"dwnl\"\n            },\n            \"file_type\": \"application/json\",\n            \"file_size\": 202502,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"2bbf2076ba604188be40e41584d830ee\"\n            },\n            \"media_id\": \"6ccbd350-c780-41e8-be51-cef47401fb4a\",\n            \"media_type\": \"FILE\",\n            \"media_name\": \"media-{{stamp}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"dataset_dates\": {\n        \"created\": \"2015-04-05T00:00:00.000Z\",\n        \"updated\": \"2016-04-05T09:22:33.000Z\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"confidentiality\": {\n            \"restricted_access\": false,\n            \"gdpr_sensitive\": false\n        },\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"odbl-1.0\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/resources",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "resources"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Edit resource",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Add resource\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    const metaId1 = responseJson.global_id",
                          "    pm.collectionVariables.set('metaTest', metaId1)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "",
                          "if (!pm.collectionVariables.get('metaId1')) pm.collectionVariables.set('metaId1', rand.uuid())",
                          "pm.collectionVariables.set('now', time.now())"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"collection_tag\": \"{{stamp}}\",\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_dates\": {\n            \"created\": \"{{now}}\",\n            \"updated\": \"{{now}}\"\n        }\n    },\n    \"global_id\": \"{{metaId1}}\",\n    \"local_id\": \"id-{{stamp}}\",\n    \"resource_title\": \"test CA 2009 - Ville de Rennes - Budget Principal\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Les données du Compte administratif de la Ville de Rennes sont des données de consommation effective qui sont en général publiées en juin de l'année suivante.\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Les données du Compte administratif de la Ville de Rennes sont des données de consommation effective qui sont en général publiées en juin de l'année suivante.\"\n        }\n    ],\n    \"theme\": \"economy\",\n    \"keywords\": [\n        \"budget\",\n        \"CA\",\n        \"Compte administratif\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{org1Id}}\",\n        \"organization_name\": \"{{org1Name}}\",\n        \"organization_address\": \"{{org1Addr}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{cont1Id}}\",\n            \"contact_name\": \"{{cont1Name}}\",\n            \"email\": \"cont1Mail\"\n        }\n    ],\n    \"available_formats\": [\n        {\n            \"connector\": {\n                \"url\": \"https://data-rudi.aqmo.org/media/download/6ccbd350-c780-41e8-be51-cef47401fb4a\",\n                \"interface_contract\": \"dwnl\"\n            },\n            \"file_type\": \"application/json\",\n            \"file_size\": 202502,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"2bbf2076ba604188be40e41584d830ee\"\n            },\n            \"media_id\": \"6ccbd350-c780-41e8-be51-cef47401fb4a\",\n            \"media_type\": \"FILE\",\n            \"media_name\": \"media-{{stamp}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"dataset_dates\": {\n        \"created\": \"2015-04-05T00:00:00.000Z\",\n        \"updated\": \"2017-04-05T09:22:33.000Z\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"confidentiality\": {\n            \"restricted_access\": false,\n            \"gdpr_sensitive\": false\n        },\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"odbl-1.0\"\n        }\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/resources",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "resources"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Del resources",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Del resource\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const meta = pm.response.json()",
                          "    pm.expect(meta.global_id).to.eql(pm.collectionVariables.get('metaId1'))",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/resources/{{metaId1}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "resources", "{{metaId1}}"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Orgs",
              "item": [
                {
                  "name": "Get orgs",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get organizations\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    pm.collectionVariables.set('org1', responseJson[0].organization_id)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/organizations?limit=5",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "organizations"],
                      "query": [
                        {
                          "key": "limit",
                          "value": "5"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get org 1",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get 1 organization\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const org = pm.response.json()",
                          "    pm.expect(org.organization_id).to.be.not.undefined",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/organizations/{{org1}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "organizations", "{{org1}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Add org",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Edit 1 organization\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const org = pm.response.json()",
                          "    pm.expect(org.organization_id).to.be.not.undefined",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "if (!pm.collectionVariables.get('orgId')) pm.collectionVariables.set('orgId', rand.uuid())",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"organization_id\": \"{{orgId}}\",\n    \"organization_name\": \"Rennes {{stamp}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/organizations/",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "organizations", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Edit org Copy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Edit 1 organization\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const org = pm.response.json()",
                          "    pm.expect(org.organization_id).to.be.not.undefined",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["", ""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"organization_id\": \"{{orgId}}\",\n    \"organization_name\": \"Rennes 1 {{stamp}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/organizations/",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "organizations", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Del org",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Del 1 organization\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const org = pm.response.json()",
                          "    pm.expect(org.organization_id).to.be.not.undefined",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"organization_id\": \"{{orgId1}}\",\n    \"organization_name\": \"Rennes {{stamp}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/organizations/{{orgId}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "organizations", "{{orgId}}"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Contact",
              "item": [
                {
                  "name": "Get contacts",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get contacts\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    pm.collectionVariables.set('cont1', responseJson[0].contact_id)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/contacts",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "contacts"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get cont 1",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get 1 organization\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const res = pm.response.json()",
                          "    pm.expect(res.contact_id).to.be.not.undefined",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/contacts/{{cont1}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "contacts", "{{cont1}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Add contact",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "if (!pm.collectionVariables.get('contId')) pm.collectionVariables.set('contId', rand.uuid())",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"contact_id\": \"{{contId}}\",\n    \"contact_name\": \"Ville de {{stamp}}\",\n    \"email\": \"ville_de_{{stamp}}@rennes.fr\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/contacts/",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "contacts", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Edit contact",
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"contact_id\": \"{{contId}}\",\n    \"contact_name\": \"Ville de {{stamp}}\",\n    \"email\": \"ma_ville@{{stamp}}.fr\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/contacts/",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "contacts", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Del contact",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get 1 organization\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const res = pm.response.json()",
                          "    pm.expect(res.contact_id).to.be.not.undefined",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"contact_id\": \"{{contId1}}\",\n    \"contact_name\": \"Rennes {{stamp}}\",\n    \"email\": \"add-{{stamp}}@irisa.fr\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/contacts/{{contId}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "contacts", "{{contId}}"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Keys",
              "item": [
                {
                  "name": "Add key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get keys\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    const pubKey1 = responseJson[0]?.name",
                          "    pm.collectionVariables.set('pubKey1', pubKey1)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{stamp}}\",\n    \"pem\": \"-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAp06ApPlbxFfT1EQcV8Qj+F2+JnYypEDvenVGN8u9ANA=\\n-----END PUBLIC KEY-----\\n\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/pub_keys",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "pub_keys"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Edit key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get keys\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    const pubKey1 = responseJson[0]?.name",
                          "    pm.collectionVariables.set('pubKey1', pubKey1)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{stamp}}\",\n    \"pem\": \"-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAp06ApPlbxFfT1EQcV8Qj+F2+JnYypEDvenVGN8u9ANA=\\n-----END PUBLIC KEY-----\\n\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/pub_keys",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "pub_keys"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get keys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get keys\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    const pubKey1 = responseJson[0]?.name",
                          "    pm.collectionVariables.set('pubKey1', pubKey1)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/pub_keys?limit=5&offset=1&sort_by=-updateAt",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "pub_keys"],
                      "query": [
                        {
                          "key": "limit",
                          "value": "5"
                        },
                        {
                          "key": "offset",
                          "value": "1"
                        },
                        {
                          "key": "sort_by",
                          "value": "-updateAt"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get keys Copy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get keys\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const responseJson = pm.response.json()",
                          "    const pubKey1 = responseJson[0]?.name",
                          "    pm.collectionVariables.set('pubKey1', pubKey1)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/pub_keys?limit=5&offset=1&sort_by=-updateAt",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "pub_keys"],
                      "query": [
                        {
                          "key": "limit",
                          "value": "5"
                        },
                        {
                          "key": "offset",
                          "value": "1"
                        },
                        {
                          "key": "sort_by",
                          "value": "-updateAt"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get key 1",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get 1 key\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const res = pm.response.json()",
                          "    pm.expect(res.name).eql(pm.collectionVariables.get('pubKey1'))",
                          "    // responseJson.map(coll => console.log(coll))",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/pub_keys/{{stamp}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "pub_keys", "{{stamp}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Del key 1",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Get 1 key\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "    const res = pm.response.json()",
                          "    pm.expect(res.name).eql(pm.collectionVariables.get('pubKey1'))",
                          "    // responseJson.map(coll => console.log(coll))",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{pmBackUrl}}/api/data/pub_keys/{{stamp}}",
                      "host": ["{{pmBackUrl}}"],
                      "path": ["api", "data", "pub_keys", "{{stamp}}"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "API Clean",
              "item": [
                {
                  "name": "Clean using API: meta",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: metadata\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/resources?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "resources"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: org",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: organizations\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/organizations?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "organizations"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: cont",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: contacts\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/contacts?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "contacts"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: media",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: media\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/media?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "media"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Clean using API: keys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Cleanup through API: keys\", () => {",
                          "    pm.expect(pm.response.code).to.eql(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{{{apiTokenName}}}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{apiUrl}}/api/admin/pub_keys?collection_tag={{stamp}}",
                      "host": ["{{apiUrl}}"],
                      "path": ["api", "admin", "pub_keys"],
                      "query": [
                        {
                          "key": "collection_tag",
                          "value": "{{stamp}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "05. Check API front",
          "item": [
            {
              "name": "GET console url",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get Rudi console URL\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseStr = codec.streamToString(pm.response)",
                      "    pm.expect(responseStr).to.match(/^https?\\:\\/\\/[\\w\\:\\.\\-\\/]+/)",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableCookies": false
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/front/form-url",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "front", "form-url"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "06. Check API Media",
          "item": [
            {
              "name": "GET media",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/media/2c26707e-3403-4304-938b-3cf634f7a33a",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "media", "2c26707e-3403-4304-938b-3cf634f7a33a"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "07. Add/get user",
          "item": [
            {
              "name": "Get all users",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get all users\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const userList = pm.response.json();",
                      "    pm.expect(userList.length).to.gte(1);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/users",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "users"]
                }
              },
              "response": []
            },
            {
              "name": "Add user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Add user\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseJson = pm.response.json();",
                      "    const user1 = pm.collectionVariables.get('softUser1username');",
                      "    pm.expect(responseJson.username).to.eq(user1);",
                      "    pm.collectionVariables.set('userId', responseJson.id)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('softUser1username', pm.collectionVariables.get('stamp'))",
                      "pm.collectionVariables.set('softUser1email', rand.getContactEmail(pm.collectionVariables.get('softUser1username')))",
                      "pm.collectionVariables.set('softUser1password', 'test')",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{softUser1username}}\",\n    \"email\": \"{{softUser1email}}\",\n    \"password\": \"{{softUser1password}}\",\n    \"confirmPassword\": \"{{softUser1password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{pmBackUrl}}/api/front/register",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "front", "register"]
                }
              },
              "response": []
            },
            {
              "name": "Edit user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Add user\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseJson = pm.response.json();",
                      "    const user1 = pm.collectionVariables.get('softUser1username');",
                      "    pm.expect(responseJson.username).to.eq(user1);",
                      "    pm.expect(responseJson.id).to.eq(pm.collectionVariables.get('userId'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('softUser1username', pm.collectionVariables.get('stamp'))",
                      "pm.collectionVariables.set('softUser1email', rand.getContactEmail(pm.collectionVariables.get('softUser1username')))",
                      "pm.collectionVariables.set('softUser1password', 'test')",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"{{userId}}\",\n    \"username\": \"{{softUser1username}}\",\n    \"email\": \"{{softUser1email}}\",\n    \"roles\": [\"Editeur\"]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/users/",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "users", ""]
                }
              },
              "response": []
            },
            {
              "name": "Get user 1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get user\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json();",
                      "    pm.expect(res.username).to.eq(pm.collectionVariables.get('softUser1username'));",
                      "    pm.expect(res.id).to.eq(pm.collectionVariables.get('userId'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/users/{{softUser1username}}",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "users", "{{softUser1username}}"]
                }
              },
              "response": []
            },
            {
              "name": "Get user: not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get user\", () => {",
                      "    pm.expect(pm.response.code).to.eql(404);",
                      "    const res = pm.response.json();",
                      "    pm.expect(res.statusCode).to.eq(404);",
                      "    pm.expect(res.message).to.eq(\"User not found: 'grul'\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/users/grul",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "users", "grul"]
                }
              },
              "response": []
            },
            {
              "name": "Get all users",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get all users\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const responseJson = pm.response.json()",
                      "    // responseJson.map(coll => console.log(coll))",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/users",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "users"]
                }
              },
              "response": []
            },
            {
              "name": "Get super user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get user admin\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json()",
                      "    // responseJson.map(coll => console.log(coll))",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/users/{{pmAdminUsr}}",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "users", "{{pmAdminUsr}}"]
                }
              },
              "response": []
            },
            {
              "name": "Get roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"DGet roles\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const roles = pm.response.json()",
                      "    pm.expect(roles[0].role.length).to.be.gt(0)",
                      "    pm.expect(roles[0].desc.length).to.be.gt(0)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/roles",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "roles"]
                }
              },
              "response": []
            },
            {
              "name": "Get 1 role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Get role admin\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json()",
                      "    // responseJson.map(coll => console.log(coll))",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/roles/Admin",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "roles", "Admin"]
                }
              },
              "response": []
            },
            {
              "name": "Delete test user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const stamp = pm.collectionVariables.get('stamp')",
                      "pm.test(`Delete user with '${stamp}' username`, () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{pmBackUrl}}/api/secu/users/{{userId}}",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "secu", "users", "{{userId}}"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "100users",
          "item": [
            {
              "name": "Add user Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Add user\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('softUser1username', pm.collectionVariables.get('stamp'))",
                      "pm.collectionVariables.set('softUser1email', rand.getContactEmail(pm.collectionVariables.get('softUser1username')))",
                      "pm.collectionVariables.set('softUser1password', 'test')",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{softUser1password}}\",\n    \"confirmPassword\": \"{{softUser1password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{pmBackUrl}}/api/front/register",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "front", "register"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "99. Logout",
          "item": [
            {
              "name": "Logout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Logout\", () => {",
                      "    pm.expect(pm.response.code).to.eql(200);",
                      "    const res = pm.response.json()",
                      "    pm.expect(res.consoleToken).to.eq(\"\")",
                      "    pm.expect(res.pmFrontToken).to.eq(\"\")",
                      "    pm.expect(res.message).to.eq(\"logout\")",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\":\"{{pmAdminUsr}}\",\n    \"password\":\"{{pmAdminPwd}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{pmBackUrl}}/api/front/logout",
                  "host": ["{{pmBackUrl}}"],
                  "path": ["api", "front", "logout"]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const DEBUG_LVL = 0",
          "const TRACE = DEBUG_LVL > 3",
          "const DEBUG = DEBUG_LVL > 2",
          "const ERROR = DEBUG_LVL > 1",
          "",
          "const WAIT_TIME = 50",
          "const TOKEN_DURATION_S = 4147200",
          "",
          "const NO_PORTAL_MSG = 'No portal connected'",
          "pm.collectionVariables.set('noPortalMsg', NO_PORTAL_MSG)",
          "let skipPortalConnection",
          "",
          "log = {",
          "    e: (fun, msg = '', arg = '') => { if (ERROR) console.error(`E (${fun}) ERROR: ${msg} ${arg}`) },",
          "    d: (fun, msg = '', arg = '') => { if (DEBUG) console.log(`D (${fun}) ${msg} ${arg}`) },",
          "    t: (fun, msg = '<', arg = '') => { if (TRACE) console.log(`T (${fun}) ${msg} ${arg}`) },",
          "}",
          "",
          "const initStoredVar = (name, defaultVal) => {",
          "    const fun = 'initStoredVar'",
          "    const storedVal = pm.variables.get(name)",
          "    if (!storedVal) {",
          "        log.t(fun, 'No value stored for', name)",
          "        pm.variables.set(name, defaultVal)",
          "    }",
          "    // log.t('[initStoredVar] val for ' + name + ' is: ' + storedVal || defaultVal)",
          "    return storedVal || defaultVal",
          "}",
          "",
          "const API_TOKEN_NAME = initStoredVar('apiTokenName', 'apiJwt')",
          "const PORTAL_TOKEN_NAME = initStoredVar('portalTokenName', 'portalJwt')",
          "",
          "const ADMIN_URL = pm.variables.get('apiUrl') + '/api/admin'",
          "",
          "",
          "log.t('const', 'API_TOKEN_NAME:', API_TOKEN_NAME)",
          "log.t('const', 'PORTAL_TOKEN_NAME:', PORTAL_TOKEN_NAME)",
          "log.t('const', 'ADMIN_URL:', ADMIN_URL)",
          "",
          "const REGEX_UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i",
          "const REGEX_JWT = /^[\\w-]+\\.[\\w-]+\\.([\\w-]+={0,3})$/",
          "const REGEX_API_VERSION = /^[0-9]+\\.[0-9]+(\\.[0-9]+)?[a-z]*$/",
          "const REGEX_URI = /^(https?|ftp):\\/\\/([\\w-]+(\\.[\\w-]+)+|(:[0-9]+)?)([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?$/",
          "const REGEX_GIT_HASH_SHORT = /^[a-z0-9]{7}/",
          "",
          "const regexCheck = (regex, str) => str ? regex.exec(`${str}`) : regex",
          "match = {",
          "    uuid: (str) => regexCheck(REGEX_UUID, str),",
          "    jwt: (str) => regexCheck(REGEX_JWT, str),",
          "    version: (str) => regexCheck(REGEX_API_VERSION, str),",
          "    uri: (str) => regexCheck(REGEX_URI, str),",
          "    gitHash: (str) => regexCheck(REGEX_GIT_HASH_SHORT, str),",
          "}",
          "",
          "error = {",
          "    throwNotFound: (msg) => { throw { statusCode: 404, name: 'NotFound', message: msg } }",
          "}",
          "",
          "time = {",
          "    now: () => new Date().toISOString(),",
          "    nowEpochMS: () => new Date().getTime(),",
          "    nowEpochS: () => _.floor(new Date().getTime() / 1000),",
          "    timezone: () => new Date().getTimezoneOffset(),",
          "    wait: (delayMs, doSomething) => {",
          "        log.t('wait', `Waiting ${delayMs / 1000}s...`)",
          "        setTimeout(doSomething ? doSomething : () => { log.t('wait', `Waited ${delayMs / 1000}s`) }, delayMs)",
          "    },",
          "}",
          "codec = {",
          "    streamToString: (data) => data?.stream?.toString('utf8'),",
          "",
          "    fromBase64: (data) => Buffer.from(data, 'base64')?.toString('utf-8'),",
          "",
          "    fromBase64Url: (base64UrlStr) => {",
          "        const fun = 'fromBase64Url'",
          "        log.t(fun)",
          "        if (!base64UrlStr) return ''",
          "        //        log.d('base64UrlStr: ' + base64UrlStr)",
          "        //        log.d('base64UrlStr.length: ' + base64UrlStr.length)",
          "        const paddedStr = (base64UrlStr.length % 4 == 0)",
          "            ? base64UrlStr",
          "            : base64UrlStr + \"====\".substring(base64UrlStr.length % 4);",
          "        // log.d('paddedStr: ' + paddedStr)",
          "        const base64Str = paddedStr",
          "            .replace(\"_\", \"/\")",
          "            .replace(\"-\", \"+\");",
          "        // log.d('base64Str: ' + base64Str)",
          "        return codec.fromBase64(base64Str);",
          "    }",
          "}",
          "",
          "rand = {",
          "    get: (randName) => pm.collectionVariables.replaceIn(randName),",
          "",
          "    uuid: () => rand.get('{{$randomUUID}}'),",
          "",
          "    pickInList: (list) => list[_.random(0, list.length - 1)],",
          "",
          "    pick: (listName) => rand.pickInList(pm.collectionVariables.get(listName)),",
          "",
          "    initVal: (field) => {",
          "        const val = pm.collectionVariables.get(field);",
          "        if (val) return val;",
          "        const randVal = rand.uuid();",
          "        pm.collectionVariables.set(field, randVal, 'string');",
          "        return randVal;",
          "    },",
          "",
          "    getContactEmail: (contactName) => `${contactName",
          "        .replace(/(Miss|(Ms|Mrs|Mr|Dr)\\.)\\s|'Jr\\.'/gi, '')",
          "        .toLowerCase()",
          "        .replace(/\\s+|\\.\\./g, '.')",
          "        .replace(/^\\.+|\\.+$|\\'+/g, '')",
          "        }@irisa.fr`,",
          "",
          "    randomize: (field) => {",
          "        const randVal = rand.uuid();",
          "        pm.collectionVariables.set(field, randVal);",
          "        return randVal;",
          "    },",
          "",
          "};",
          "",
          "secu = {",
          "    isTokenValid: (tokenName) => {",
          "        const fun = 'isTokenValid'",
          "        log.t(fun, tokenName)",
          "        const token = pm.collectionVariables.get(tokenName)",
          "        // console.log('typeof token: ' + typeof token)",
          "        if (!token || typeof token !== 'string') {",
          "            log.d(fun, 'Token ' + tokenName + ' is invalid: ', JSON.stringify(token))",
          "            return false",
          "        }",
          "        // log.d('splitting token: ' + token)",
          "        const jwtBodyEncoded = token.split('.')[1]",
          "        // log.d('split token: ' + jwtBodyEncoded)",
          "",
          "        const jwtBody = JSON.parse(codec.fromBase64Url(jwtBodyEncoded))",
          "        // log.d('decoded body: ' + jwtBody)",
          "        if (!jwtBody.exp) {",
          "            log.d(fun, 'No expiration time was found')",
          "            return false",
          "        }",
          "        // log.d('is token valid?')",
          "        const isValid = jwtBody.exp > time.nowEpochS()",
          "        log.d(fun, tokenName + ' is ' + (isValid ? '' : 'not ') + 'valid')",
          "        return isValid",
          "    },",
          "",
          "    renewApiToken: (tokenName, next) => {",
          "        const fun = 'renewApiToken'",
          "        log.t(fun)",
          "        const reqUrl = pm.variables.get('cryptoJwtUrl') + '/forge'",
          "        // log.d('reqUrl: ' + reqUrl)",
          "        const reqNewToken = {",
          "            url: reqUrl,",
          "            method: 'POST',",
          "            header: { \"Content-Type\": \"application/json\" },",
          "            body: {",
          "                mode: 'raw',",
          "                raw: JSON.stringify({",
          "                    'exp': time.nowEpochS() + TOKEN_DURATION_S,",
          "                    'jti': rand.get('{{$randomUUID}}'),",
          "                    'sub': pm.variables.get('pmClientName') || 'rudi_api_pm',",
          "                    'client_id': pm.variables.get('pm_client_id') || 'pm',",
          "                    'req_mtd': 'all',",
          "                    'req_url': 'all'",
          "                })",
          "            }",
          "        }",
          "        return new Promise((resolve, reject) => {",
          "            pm.sendRequest(reqNewToken, (err, res) => {",
          "                if (err || res.code > 399 || res.statusCode > 399) {",
          "                    log.e(fun, `'Crypto' module unreachable on ${reqUrl}`)",
          "                    return reject(`Crypto module unreachable on ${reqUrl}`)",
          "                    // error.throwNotFound(`Crypto module unreachable on ${reqUrl}`)",
          "                }",
          "                const token = codec.streamToString(res)",
          "                // log.d('rudiProdToken : ' + token)",
          "                try {",
          "                    pm.expect(res).to.have.property('code', 200);",
          "                    pm.expect(token).to.match(/^\\w+\\.\\w+\\.[\\w\\-=]+$/)",
          "                } catch (err) {",
          "                    console.error('[renewApiToken]: ' + err)",
          "                    return reject('[renewApiToken]: ' + err)",
          "                    // throw new Error('[renewApiToken]: ' + err)",
          "                }",
          "                pm.collectionVariables.set(tokenName, token)",
          "                log.d(fun, 'API token stored')",
          "",
          "                if (next) return resolve(next(token))",
          "                return resolve(token)",
          "            })",
          "        })",
          "    },",
          "",
          "    renewPortalToken: (tokenName, rudiProdToken) => {",
          "        const fun = 'renewPortalToken'",
          "        log.t(fun)",
          "        if (pm.collectionVariables.get('skipPortalConnection')) return new Promise((resolve, reject) => resolve(NO_PORTAL_MSG))",
          "        const reqUrl = ADMIN_URL + '/portal/token'",
          "        // log.d('reqUrl: ' + reqUrl)",
          "        const reqNewToken = {",
          "            url: reqUrl,",
          "            method: 'GET',",
          "            header: {",
          "                'Content-Type': \"application/json\",",
          "                'Authorization': 'Bearer ' + rudiProdToken",
          "            },",
          "        }",
          "        return new Promise((resolve, reject) => {",
          "            pm.sendRequest(reqNewToken, (err, res) => {",
          "                if (err) {",
          "                    log.e(fun, 'RUDI API unreachable on', reqUrl)",
          "                    // error.throwNotFound(`RUDI API unreachable on ${reqUrl}`)",
          "                    return reject(`RUDI API unreachable on ${reqUrl}`)",
          "                }",
          "                try {",
          "                    pm.expect(res).to.have.property('code', 200);",
          "                } catch (error) {",
          "                    log.e(fun, codec.streamToString(res), error)",
          "                    //log.d('[renewPortalToken] Response to Postman req: ' + codec.streamToString(res))",
          "                    return reject('[renewPortalToken]: ' + codec.streamToString(res))",
          "                    // throw new Error('[renewPortalToken]: ' + codec.streamToString(res))",
          "                }",
          "                //log.d('renewPortalToken res: ' + JSON.stringify(res))",
          "                resStr = codec.streamToString(res)",
          "                log.d(fun, 'response:', resStr)",
          "                if (resStr == NO_PORTAL_MSG) {",
          "                    log.d(fun, 'No portal connection')",
          "",
          "                    pm.collectionVariables.set('skipPortalConnection', true)",
          "                    return resolve(NO_PORTAL_MSG)",
          "                }",
          "                const token = JSON.parse(codec.streamToString(res))?.access_token",
          "                log.d(fun, 'Portal token:', token)",
          "                try {",
          "                    pm.expect(token).to.match(/^\\w+\\.\\w+\\.[\\w\\-=]+$/)",
          "                } catch (error) {",
          "                    log.e(fun, codec.streamToString(res), error)",
          "                    //log.d('[renewPortalToken] Response to Postman req: ' + codec.streamToString(res))",
          "                    return reject('[renewPortalToken]: ' + codec.streamToString(res))",
          "                    // throw new Error('[renewPortalToken]: ' + codec.streamToString(res))",
          "                }",
          "",
          "                pm.collectionVariables.set(tokenName, token)",
          "                log.d(fun, 'Portal token stored')",
          "                return resolve(token)",
          "            })",
          "        })",
          "    },",
          "",
          "    getRudiProdToken: async (next) => {",
          "        log.t('-- getRudiProdToken --')",
          "        const tokenName = API_TOKEN_NAME",
          "        if (!secu.isTokenValid(tokenName)) await secu.renewApiToken(tokenName, next)",
          "        else if (next) next(pm.collectionVariables.get(tokenName))",
          "        log.t('API token stored')",
          "        return pm.collectionVariables.get(tokenName)",
          "    },",
          "",
          "    getPortalToken: async (apiToken) => {",
          "        log.t('-- getPortalToken --')",
          "        if (pm.collectionVariables.get('skipPortalConnection')) return NO_PORTAL_MSG",
          "        const tokenName = PORTAL_TOKEN_NAME",
          "        if (!secu.isTokenValid(tokenName)) await secu.renewPortalToken(tokenName, apiToken)",
          "        log.t('Portal token stored')",
          "        if (pm.collectionVariables.get('skipPortalConnection')) return NO_PORTAL_MSG",
          "        return pm.collectionVariables.get(tokenName)",
          "    }",
          "",
          "}",
          "",
          "const fun = 'init'",
          "const init = async () => {",
          "    let rudiProdToken",
          "    try {",
          "        rudiProdToken = await secu.getRudiProdToken()",
          "        log.t(fun, 'rudiProd token Received')",
          "    } catch (e) {",
          "        log.e(fun, 'Failed to get rudiProd token', `${e}`)",
          "",
          "    }",
          "    skipPortalConnection = pm.collectionVariables.get('skipPortalConnection')",
          "    log.t(fun, 'skipPortalConnection:', skipPortalConnection)",
          "    if (rudiProdToken && !skipPortalConnection) {",
          "        try {",
          "            portalToken = await secu.getPortalToken(rudiProdToken)",
          "            if (portalToken == NO_PORTAL_MSG)",
          "                log.d(fun, NO_PORTAL_MSG)",
          "            else",
          "                log.d(fun, 'Portal token received')",
          "        } catch (e) {",
          "            log.e(fun, 'Failed to get portal token', `${e}`)",
          "        }",
          "    }",
          "}",
          "",
          "init()",
          "time.wait(WAIT_TIME, () => log.t(fun, 'Pre-request Scripts loaded'))",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "stamp",
      "value": "prod-manager-soft-checks"
    },
    {
      "key": "dateUpdate",
      "value": ""
    },
    {
      "key": "apiJwt",
      "value": ""
    },
    {
      "key": "mediaToken",
      "value": ""
    },
    {
      "key": "noPortalMsg",
      "value": ""
    },
    {
      "key": "skipPortalConnection",
      "value": ""
    },
    {
      "key": "apiVersion",
      "value": ""
    },
    {
      "key": "apiUrl",
      "value": ""
    },
    {
      "key": "readMetaId",
      "value": ""
    },
    {
      "key": "org1Id",
      "value": ""
    },
    {
      "key": "org1Name",
      "value": ""
    },
    {
      "key": "org1Addr",
      "value": ""
    },
    {
      "key": "cont1Id",
      "value": ""
    },
    {
      "key": "cont1Name",
      "value": ""
    },
    {
      "key": "cont1Mail",
      "value": ""
    },
    {
      "key": "metaId1",
      "value": ""
    },
    {
      "key": "now",
      "value": ""
    },
    {
      "key": "metaTest",
      "value": ""
    },
    {
      "key": "org1",
      "value": ""
    },
    {
      "key": "orgId",
      "value": ""
    },
    {
      "key": "cont1",
      "value": ""
    },
    {
      "key": "contId",
      "value": ""
    },
    {
      "key": "pubKey1",
      "value": ""
    },
    {
      "key": "softUser1username",
      "value": ""
    },
    {
      "key": "softUser1email",
      "value": ""
    },
    {
      "key": "softUser1password",
      "value": ""
    }
  ]
}
